use namespace="System.IO"

var Configuration='Release'

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
default BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'
default SPEC_PROJECT_GLOB = "spec/*/project.json"

use-standard-lifecycle
k-standard-goals

#spec-compile .build-compile target='compile'
  @{
    var projectGlobs = new List<string>();
    List<string> specProjects = null;
    
    if (!BuildSrcOnly && Directory.Exists("spec"))
    {
      Directory.CreateDirectory(TARGET_DIR);
      
      string commitHash = null;
      if (AddAssemblyInfo)
      {
          var commitHashFile = Path.Combine(TARGET_DIR, "commit");
          GitCommand("rev-parse HEAD >> " + commitHashFile);
          commitHash = File.ReadAllLines(commitHashFile)[0];
      }
      
      specProjects = Files.Include(SPEC_PROJECT_GLOB).ToList();
      specProjects.ForEach(projectFile =>
      {
          if (AddAssemblyInfo)
          {
              var projectText = File.ReadAllText(projectFile);
              var project = (JsonObject)Json.Deserialize(projectText);
              var isSharedProject = project.Keys.Contains("shared");
    
              // We don't want to embed the commit hash in it because 
              // the consumers would get that file
              if (!isSharedProject)
              {
                  Console.WriteLine("Embedding commit hash in assembly");
                  var projectFolder = Path.GetDirectoryName(projectFile);
                  var commitHashAttribute = String.Format("[assembly: System.Reflection.AssemblyMetadata(\"CommitHash\", \"{0}\")]", commitHash);
    
                  var buildInfoFile = Path.Combine(projectFolder, "BuildInfo.generated.cs");
                  File.WriteAllText(buildInfoFile, commitHashAttribute);
              }
          }
      });
      
      projectGlobs.Add(SPEC_PROJECT_GLOB);
    }
    
    if (projectGlobs.Any())
    {
      DotnetBuild(string.Join(" ", projectGlobs.ToArray()), Configuration, BuildFramework);
    }
    
    if (specProjects != null)
    {
      specProjects.ForEach(projectFile =>
      {
        DotnetPack(projectFile, BUILD_DIR, Configuration, E("KOREBUILD_DOTNET_PACK_OPTIONS") + " --no-build");
      });
    
      foreach (var nupkg in Files.Include(Path.Combine(BUILD_DIR, "*/" + Configuration + "/*.nupkg")))
      {
        File.Copy(nupkg, Path.Combine(BUILD_DIR, Path.GetFileName(nupkg)), true);
      }
    }
  }
